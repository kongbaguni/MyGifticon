//
//  Gifticon.swift
//  MyGifticon
//
//  Created by Changyeol Seo on 8/19/25.
//
import UIKit
import SwiftUI
import SwiftData
import KongUIKit

fileprivate extension String {
    var dateValue:Date? {
        // 1. DateFormatter ÏÑ§Ï†ï
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy.MM.dd"
        formatter.locale = Locale(identifier: "ko_KR")
        formatter.timeZone = TimeZone(identifier: "Asia/Seoul")
        
        // 2. Î¨∏ÏûêÏó¥ ‚Üí Date Î≥ÄÌôò (ÏûêÏ†ï Í∏∞Ï§Ä)
        guard let date = formatter.date(from: self) else {
            return nil
        }
        
        // 3. "Ï†ÄÎÖÅ 12Ïãú 00Î∂Ñ" = 24:00 = Îã§ÏùåÎÇ† 0Ïãú
        var calendar = Calendar(identifier: .gregorian)
        calendar.timeZone = TimeZone(identifier: "Asia/Seoul")!
        
        return calendar.date(byAdding: .day, value: 1, to: date)?
            .addingTimeInterval(0) // ÏÑ†ÌÉùÏ†Å: Î™ÖÏãúÏ†Å 0Ï¥à Ï∂îÍ∞Ä
    }
    
    var getBrandName: String? {
        let brands: [String] = [
            "Ïä§ÌÉÄÎ≤ÖÏä§",
            "Ìà¨Ïç∏ÌîåÎ†àÏù¥Ïä§",
            "Ïù¥ÎîîÏïºÏª§Ìîº",
            "Î©îÍ∞ÄÏª§Ìîº",
            "ÌååÏä§Ïø†Ï∞å",
            "ÌååÎ¶¨Î∞îÍ≤åÎú®",
            "ÎöúÎ†àÏ•¨Î•¥",
            "Î∞∞Ïä§ÌÇ®ÎùºÎπàÏä§",
            "ÎçòÌÇ®",
            "Îß•ÎèÑÎÇ†Îìú",
            "Î°ØÎç∞Î¶¨ÏïÑ",
            "Î≤ÑÍ±∞ÌÇπ",
            "ÎßòÏä§ÌÑ∞Ïπò",
            "ÍµêÏ¥åÏπòÌÇ®",
            "BHCÏπòÌÇ®",
            "BBQ",
            "ÍµΩÎÑ§ÏπòÌÇ®",
            "ÎÑ§ÎÑ§ÏπòÌÇ®",
            "ÌîºÏûêÌóõ",
            "ÎèÑÎØ∏ÎÖ∏ÌîºÏûê",
            "ÎØ∏Ïä§ÌÑ∞ÌîºÏûê",
            "ÌååÌååÏ°¥Ïä§",
            "ÏÑúÎ∏åÏõ®Ïù¥",
            "Ïò¨Î¶¨Î∏åÏòÅ",
            "GS25",
            "CU",
            "ÏÑ∏Î∏êÏùºÎ†àÎ∏ê",
            "ÎØ∏ÎãàÏä§ÌÜ±",
            "Ïù¥ÎßàÌä∏24",
            "Ïª§ÌîºÎπà",
            "ÌÉêÏï§ÌÉêÏä§",
            "Ìï†Î¶¨Ïä§Ïª§Ìîº",
            "ÏóîÏ†úÎ¶¨ÎÑàÏä§",
            "ÎπΩÎã§Î∞©",
            "Í≥µÏ∞®",
            "Ïù¥ÏÇ≠ÌÜ†Ïä§Ìä∏",
            "ÌïúÏä§ÏºÄÏùµ",
            "ÌÅ¨Î¶¨Ïä§ÌîºÌÅ¨Î¶º",
            "Ïπ¥ÌéòÎ≤†ÎÑ§",
            "Ìè¥Î∞îÏÖã",
            "Ïù¥ÎßàÌä∏",
            "Îã§Ïù¥ÏÜå",
            "ÌôàÌîåÎü¨Ïä§",
        ]
        
        let detectedBrand = brands.first { self.contains($0) }
        return detectedBrand
    }
    
    var getMenuName:String? {
        let menuKeywords: [String] = [
            // ‚òïÔ∏è Ïª§Ìîº & ÏùåÎ£å
            "ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏",
            "Ïπ¥ÌéòÎùºÎñº",
            "Î∞îÎãêÎùºÎùºÎñº",
            "Ïπ¥ÎùºÎ©úÎßàÎÅºÏïÑÎòê",
            "Ïπ¥Ìë∏ÏπòÎÖ∏",
            "ÏóêÏä§ÌîÑÎ†àÏÜå",
            "ÌîåÎû´ÌôîÏù¥Ìä∏",
            "ÏΩúÎìúÎ∏åÎ£®",
            "ÎèåÏ≤¥ÎùºÎñº",
            "Ïò§Ìä∏ÎùºÎñº",
            "ÎîîÏπ¥ÌéòÏù∏ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏",
            "Ìó§Ïù¥Ï¶êÎÑõÎùºÎñº",
            "ÎØºÌä∏Ï¥àÏΩîÎùºÎñº",
            "Ï¥àÏΩîÎùºÎñº",
            "ÎÖπÏ∞®ÎùºÎñº",
            "ÌôçÏ∞®ÎùºÎñº",
            "Î∞ÄÌÅ¨Ìã∞",
            "Î≥µÏà≠ÏïÑÏïÑÏù¥Ïä§Ìã∞",
            "Ïú†ÏûêÏ∞®",
            "Î†àÎ™¨Ìã∞",
            "Ïä§Î¨¥Îîî",
            "ÏöîÍ±∞Ìä∏Ïä§Î¨¥Îîî",
            "ÌîÑÎùºÌë∏ÏπòÎÖ∏",
            "Îî∏Í∏∞ÎùºÎñº",
            "Îî∏Í∏∞ÏöîÍ±∞Ìä∏",
            "ÏïÑÏù¥Ïä§ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏",
            "ÏïÑÏù¥Ïä§ÎùºÎñº",
            "ÏïÑÏù¥Ïä§Î∞îÎãêÎùºÎùºÎñº",
            "ÏïÑÏù¥Ïä§Ìã∞",
            "Ìï´Ï¥àÏΩî",

            // üç∞ ÎîîÏ†ÄÌä∏ & Î≤†Ïù¥Ïª§Î¶¨
            "ÏπòÏ¶àÏºÄÏù¥ÌÅ¨",
            "Îâ¥ÏöïÏπòÏ¶àÏºÄÏù¥ÌÅ¨",
            "Ï¥àÏΩîÏºÄÏù¥ÌÅ¨",
            "ÏÉùÌÅ¨Î¶ºÏºÄÏù¥ÌÅ¨",
            "Ï°∞Í∞ÅÏºÄÏù¥ÌÅ¨",
            "Ìã∞ÎùºÎØ∏Ïàò",
            "ÎßàÏπ¥Î°±",
            "Ïø†ÌÇ§",
            "Ïä§ÏΩò",
            "Î®∏ÌïÄ",
            "ÎèÑÎÑõ",
            "Í∏ÄÎ†àÏù¥Ï¶àÎìúÎèÑÎÑõ",
            "Ï¥àÏΩîÎèÑÎÑõ",
            "ÏûºÎèÑÎÑõ",
            "ÌÅ¨Î£®ÏïÑÏÉÅ",
            "ÏÉåÎìúÏúÑÏπò",
            "ÌñÑÏπòÏ¶àÏÉåÎìúÏúÑÏπò",
            "Î≤†Ïù¥Ïª®ÏóêÍ∑∏Î®∏ÌïÄ",
            "Î∂àÍ≥†Í∏∞Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÏπòÏ¶àÎ≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÎçîÎ∏îÎ∂àÍ≥†Í∏∞Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÎπÖÎß•ÏÑ∏Ìä∏",
            "1955Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÏÉàÏö∞Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÌÜµÏÉàÏö∞Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÏôÄÌçºÏÑ∏Ìä∏",
            "Í∏∞ÎÑ§Ïä§ÏôÄÌçºÏÑ∏Ìä∏",
            "Ïã∏Ïù¥ÏàúÏÇ¥Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÎßòÏä§ÌÑ∞ÏπòÏã∏Ïù¥Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "ÏπòÌÇ®Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "Ìï´ÌÅ¨Î¶¨Ïä§ÌîºÏπòÌÇ®Î≤ÑÍ±∞ÏÑ∏Ìä∏",
            "Îß•Ïä§ÌååÏù¥ÏãúÏÉÅÌïòÏù¥ÏÑ∏Ìä∏",
            "Î∂àÍ≥†Í∏∞Î≤ÑÍ±∞Îã®Ìíà",
            "ÌñÑÎ≤ÑÍ±∞Îã®Ìíà",

            // üçó ÏπòÌÇ®
            "ÌõÑÎùºÏù¥ÎìúÏπòÌÇ®",
            "ÏñëÎÖêÏπòÌÇ®",
            "Í∞ÑÏû•ÏπòÌÇ®",
            "ÎßàÎäòÏπòÌÇ®",
            "ÎøåÎßÅÌÅ¥",
            "ÌóàÎãàÏΩ§Î≥¥",
            "Ìô©Í∏àÏò¨Î¶¨Î∏åÏπòÌÇ®",
            "Í≥†Ï∂îÎ∞îÏÇ¨ÏÇ≠",
            "ÌÅ¨Î¶¨Ïä§ÌîºÏπòÌÇ®",
            "ÏπòÌÇ®Î¨¥",
            "ÏΩúÎùº1.25L",
            "ÏÇ¨Ïù¥Îã§1.25L",

            // üçï ÌîºÏûê
            "ÌéòÌçºÎ°úÎãàÌîºÏûê",
            "ÏΩ§ÎπÑÎÑ§Ïù¥ÏÖòÌîºÏûê",
            "Î∂àÍ≥†Í∏∞ÌîºÏûê",
            "Ìè¨ÌÖåÏù¥ÌÜ†ÌîºÏûê",
            "ÏπòÏ¶àÌîºÏûê",
            "ÏäàÌçºÎîîÎü≠Ïä§ÌîºÏûê",
            "Í≥®ÎìúÌè¨ÌÖåÏù¥ÌÜ†ÌîºÏûê",
            "Ìï´ÏπòÌÇ®ÌîºÏûê",

            // üç¶ ÏïÑÏù¥Ïä§ÌÅ¨Î¶º
            "Ïã±Í∏ÄÎ†àÍ∑§Îü¨",
            "ÎçîÎ∏îÏ£ºÎãàÏñ¥",
            "ÌååÏù∏Ìä∏",
            "ÏøºÌÑ∞",
            "Ìå®Î∞ÄÎ¶¨",
            "ÌïòÌîÑÍ∞§Îü∞",
            "ÏªµÏïÑÏù¥Ïä§ÌÅ¨Î¶º",
            "ÏΩòÏïÑÏù¥Ïä§ÌÅ¨Î¶º",
            "ÏïÑÏù¥Ïä§ÏºÄÏù¥ÌÅ¨",

            // üè™ Ìé∏ÏùòÏ†ê / ÏÉÅÌíàÍ∂å
            "1ÎßåÏõê ÍµêÌôòÍ∂å",
            "2ÎßåÏõê ÍµêÌôòÍ∂å",
            "5ÎßåÏõê ÍµêÌôòÍ∂å",
            "10ÎßåÏõê ÍµêÌôòÍ∂å",
            "ÍµêÌôòÍ∂å 1,000ÏõêÍ∂å",
            "ÍµêÌôòÍ∂å 3,000ÏõêÍ∂å",
            "ÍµêÌôòÍ∂å 5,000ÏõêÍ∂å",
            "ÍµêÌôòÍ∂å 10,000ÏõêÍ∂å",
            "Î™®Î∞îÏùºÏÉÅÌíàÍ∂å 10,000ÏõêÍ∂å",
            "Î™®Î∞îÏùºÏÉÅÌíàÍ∂å 20,000ÏõêÍ∂å",
            "Î™®Î∞îÏùºÏÉÅÌíàÍ∂å 30,000ÏõêÍ∂å",
            "Î™®Î∞îÏùºÍ∏àÏï°Í∂å 50,000ÏõêÍ∂å",
            "Ìé∏ÏùòÏ†êÏÉÅÌíàÍ∂å",
            "Í∏∞ÌîÑÌä∏Ïπ¥Îìú",
            "Î¨∏ÌôîÏÉÅÌíàÍ∂å",
            "Ìï¥ÌîºÎ®∏Îãà",
            "Ïª¨Ï≥êÏ∫êÏâ¨"
        ]
        let detectedMenu = menuKeywords.first { self.contains($0) }
        return detectedMenu
    }
}

fileprivate extension Date {
    var daysUntilNow:Int {
        let calendar = Calendar.current
        let startOfToday = calendar.startOfDay(for: Date())
        let startOfTarget = calendar.startOfDay(for: self)
        
        if let diff = calendar.dateComponents([.day], from: startOfToday, to: startOfTarget).day {
            return max(diff, 0) // Í≥ºÍ±∞ ÎÇ†ÏßúÎ©¥ 0 Î∞òÌôò
        } else {
            return 0
        }
    }
}

@Model
final class GifticonModel {
    static let tags : [KSelectView.Item] = [
        .init(id: 0, color: .red),
        .init(id: 1, color: .orange),
        .init(id: 2, color: .yellow),
        .init(id: 3, color: .green),
        .init(id: 4, color: .blue),
        .init(id: 5, color: .purple)
    ]

    /** Í∏∞ÌîÑÌã∞ÏΩòÏóêÏÑú Ï∂îÏ∂úÌïú Î¨∏ÏûêÏó¥ */
    var title: String = ""
    /** ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûëÏÑ±ÌïòÎäî Î©îÎ™® */
    var memo: String = ""
    /** Í∏∞ÌîÑÌã∞ÏΩòÏóêÏÑú Ï∂îÏ∂úÌïú Î∞îÏΩîÎìúÏùò Î¨∏ÏûêÏó¥ */
    var barcode: String = ""
    /** Í∏∞ÌîÑÌã∞ÏΩòÏóêÏÑú Ï∂îÏ∂úÌïú Ïú†Ìö®Í∏∞Í∞Ñ Ï¢ÖÎ£åÏùº */
    var limitDateYMD: String = ""
    /** Í∏∞Ï∏†Ìã∞ÏΩò Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• */
    var imageData: Data
    /** Ï†ÄÏû•ÏùºÏãú */
    var createdAt: Date
    /** ÏÇ≠Ï†úÏ≤òÎ¶¨ Flag */
    var deleted: Bool = false
    /** Ïª¨Îü¨ ÌÖåÍ∑∏ */
    var tag: Int = 0
    
    @Transient
    var image: UIImage {
        get { UIImage(data: imageData) ?? UIImage() }
        set { imageData = newValue.pngData() ?? Data() }
    }

    @Transient
    var limitDate:Date? {
        get {
            return limitDateYMD.dateValue
        }
    }
    
    @Transient
    var isLimitOver: Bool {
        if let limitDate = limitDate {
            return Date() > limitDate
        }
        return false
    }
    
    @Transient
    var daysUntilLimit: Int {
        if let limitDate = limitDate {
            return limitDate.daysUntilNow
        }
        return 0
    }
    
    @Transient
    var tagItem: KSelectView.Item {
        get {
            GifticonModel.tags[self.tag]
        }
    }
    
    @Transient
    var brandName: String? {
        get {
            title.getBrandName
        }
    }
    
    @Transient
    var menuName: String? {
        get {
            title.getMenuName
        }
    }
    
    // Required initializer for @Model types
    init(title: String, barcode: String, limitDate: String, image: UIImage) {
        self.title = title
        self.barcode = barcode
        self.limitDateYMD = limitDate
        self.imageData = image.pngData() ?? Data()
        self.createdAt = Date()
        self.memo = ""
        if let name = title.getBrandName {
            memo += name
        }
        if let name = title.getMenuName {
            if memo.isEmpty == false {
                memo += " "
            }
            memo += name
        }
        self.deleted = false
        self.tag = 0
    }
    
}



extension GifticonModel {
    /** deleted ÎßàÌÅ¨ Îêú Í∏∞ÌîÑÌã∞ÏΩò ÏùºÍ¥Ñ ÏÇ≠Ï†ú*/
    static func deleteMarkedGifticons(context: ModelContext) throws {
        let descriptor = FetchDescriptor<GifticonModel>(
            predicate: #Predicate { $0.deleted == true }
        )

        let markedGifticons = try context.fetch(descriptor)

        for gifticon in markedGifticons {
            context.delete(gifticon)
        }

        try context.save()
    }
}
